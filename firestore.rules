rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if user owns a document
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isOwner(userId);

      // Users can create their own profile on signup
      allow create: if isOwner(userId);

      // Users can update their own profile
      allow update: if isOwner(userId);

      // No one can delete user profiles
      allow delete: if false;
    }

    // Journeys collection
    match /journeys/{journeyId} {
      // Anyone authenticated can create a journey
      allow create: if isSignedIn() &&
        request.resource.data.createdBy == request.auth.uid;

      // Anyone authenticated can read any journey (simplified for now)
      allow read: if isSignedIn();

      // Allow updates if:
      // 1. User is the creator (can update anything), OR
      // 2. User is adding themselves to memberIds (joining the journey)
      allow update: if isSignedIn() && (
        // Creator can update anything
        resource.data.createdBy == request.auth.uid ||
        // OR user is joining (only adding their UID to memberIds)
        (
          request.resource.data.memberIds.hasAll(resource.data.memberIds) &&
          request.resource.data.memberIds.hasOnly([request.auth.uid].concat(resource.data.memberIds)) &&
          request.auth.uid in request.resource.data.memberIds &&
          !(request.auth.uid in resource.data.memberIds)
        )
      );

      allow delete: if isSignedIn() &&
        resource.data.createdBy == request.auth.uid;

      // Journey members subcollection
      match /members/{memberId} {
        // Anyone authenticated can read members
        allow read: if isSignedIn();
        // Anyone authenticated can write members (for now)
        allow write: if isSignedIn();
      }

      // Reading logs subcollection
      match /readingLogs/{logId} {
        // Anyone authenticated can read logs
        allow read: if isSignedIn();

        // Anyone authenticated can create logs
        allow create: if isSignedIn();

        // Only log creator can update/delete
        allow update, delete: if isSignedIn() &&
          resource.data.loggedBy == request.auth.uid;
      }

      // Verse completions subcollection
      match /verseCompletions/{verseId} {
        // Anyone authenticated can read
        allow read: if isSignedIn();

        // Anyone authenticated can write (Cloud Functions will handle this eventually)
        allow write: if isSignedIn();
      }
    }

    // Invitations collection
    match /invitations/{invitationId} {
      // Anyone authenticated can read/write invitations
      allow read, write: if isSignedIn();
    }
  }
}
